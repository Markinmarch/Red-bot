from aiogram import types


from red_bot.settings.setting import dp
from red_bot.settings.state import AddUser
# from red_bot.sql_db.db import database as db


@dp.message_handler(text = 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def cmd_name(message: types.Message):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º State()
    await AddUser.name.set()
    # –∏ —Å–ø—Ä–∞—à–∏–≤–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è',
        reply_markup = types.ReplyKeyboardRemove()
    )    
    

# @dp.message_handler(content_types = ['text'])
# async def add_age(message: types.Message):
#     # –∑–∞–ø–∞—Ä—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑—Ä–∞—Å—Ç
#     await AddUser.age.set()
#     await message.reply('–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏)')
#     return message.text.isdigit()


    # # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑—Ä–∞—Å—Ç
    # await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–∏—Ñ—Ä–∞–º–∏)')
    # user_age = message.text.isdigit()
    # await AddUser.next()

    # # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª
    # markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    # markup.add('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π')
    # await message.answer(
    #     '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
    #     reply_markup = markup 
    # )
    # if message.text == '–ú—É–∂—Å–∫–æ–π':
    #     user_gender = 1
    # if message.text == '–ñ–µ–Ω—Å–∫–∏–π':
    #     user_gender = 0
    # await AddUser.next()

    # # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # await AddUser.next()
    # await message.answer(
    #     '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    #     reply_markup = types.ReplyKeyboardRemove()
    # )
    # user_phone = message.text.isdigit()

    # await db.insert_users(
    #     message.from_user.id,
    #     user_name,
    #     user_age,
    #     user_gender,
    #     user_phone
    # )
    # await db.conn.commit()
    # await db.conn.close()

    # await state.finish()

        # async with context.proxy() as user_data:
        #     user_data['name'] = message.text
        
        #     # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑—Ä–∞—Å—Ç
        #     await AddUser.next()
        #     await message.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–∏—Ñ—Ä–∞–º–∏)')
        #     user_data['age'] = message.text.isdigit()

        #     # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª
        #     await AddUser.next()
        #     markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        #     markup.add('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π')
        #     await message.reply(
        #         '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
        #         reply_markup = markup 
        #     )
        #     if message.text == '–ú—É–∂—Å–∫–æ–π':
        #         user_data['gender'] = 1
        #     else:
        #         user_data['gender'] = 0

        #     # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        #     await AddUser.next()
        #     await message.reply(
        #         '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        #         reply_markup = types.ReplyKeyboardRemove()
        #     )
        #     user_data['phone'] = message.text.isdigit()

        #     db.insert_users(
        #         message.from_user.id,
        #         user_data['name'],
        #         user_data['age'],
        #         user_data['gender'],
        #         user_data['phone']
        #     )
        #     db.conn.commit()
        #     db.conn.close()

        # await context.finish()

        # await message.answer(
        #     text = '–ì–æ—Ç–æ–≤–æ!'
        # )
